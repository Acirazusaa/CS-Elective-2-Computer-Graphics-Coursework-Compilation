#define GLEW_STATIC

#include <iostream>
#include <GL/glew.h>
#include <GL/glut.h>

using namespace std;

GLfloat shapePositionX = 0.0f;
GLfloat shapePositionY = 0.0f;

void triangle() {
    GLfloat trianglevertices[] = {
		0.30f, 0.0f, 0.0f,				0, 0, 132,
    	0.0f,  0.30f, 0.0f,				0, 0, 132,
    	0.0f, -0.30f, 0.0f,				0, 0, 132,

    	-0.30f, 0.0f, 0.0f,  			0,240,132,
    	0.0f,  0.30f, 0.0f,				0,240,132,
    	0.0f, -0.30f, 0.0f,				0,240,132,

    	0.30f, 0.0f, 0.0f,   			180,0,112,
    	0.15f, 0.30f, 0.0f,				180,0,112,
   		-0.15f, 0.30f, 0.0f,			180,0,112,

    	0.30f, 0.0f, 0.0f,   			50,10,99,
    	0.15f, -0.30f, 0.0f,			50,10,99,
   		-0.15f, -0.30f, 0.0f,			50,10,99,

   		-0.30f, 0.0f, 0.0f,  			100,100,0,
   		-0.15f, -0.30f, 0.0f,			100,100,0,
    	0.15f, -0.30f, 0.0f,			100,100,0,

   		-0.30f, 0.0f, 0.0f,  			185,0,0,
    	0.15f, 0.30f, 0.0f,				185,0,0,
   		-0.15f, 0.30f, 0.0f,			185,0,0
	};

    GLuint VBOid;
    glGenBuffers(1, &VBOid);
    glBindBuffer(GL_ARRAY_BUFFER, VBOid);
    glBufferData(GL_ARRAY_BUFFER, sizeof(trianglevertices), trianglevertices, GL_STATIC_DRAW);

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);

    glVertexPointer(3, GL_FLOAT, 6 * sizeof(GLfloat), 0);
    glColorPointer(3, GL_FLOAT, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
    glDrawArrays(GL_TRIANGLES, 0, 18);

    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_COLOR_ARRAY);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glDeleteBuffers(1, &VBOid);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glPushMatrix();
    glTranslatef(shapePositionX, shapePositionY, 0.0f);
    triangle();
    glPopMatrix();
    glFlush();
}

void keyPress(int key, int x, int y) {
    const GLfloat step = 0.05f;
    
    if (key == GLUT_KEY_UP){
    	cout << key << " up" << endl;
        shapePositionY += step;
	} else if (key == GLUT_KEY_DOWN){
		cout << key << " down" << endl;
        shapePositionY -= step;
	} else if (key == GLUT_KEY_LEFT){
		cout << key << " left" << endl;
        shapePositionX -= step;
	} else if (key == GLUT_KEY_RIGHT){
		cout << key << " right" << endl;
        shapePositionX += step;
	} else {
		cout << "Invalid Input!" << endl;
	}

    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(700, 500);
    glutCreateWindow("LAB 8");
    glutDisplayFunc(display);
    glutSpecialFunc(keyPress);

    GLenum err = glewInit();
    if (err == GLEW_OK) {
        glutMainLoop();
    }

    return 0;
}
